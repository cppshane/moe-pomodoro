@page "/"
@inject IJSRuntime JSRuntime
@using SystemTimer = System.Timers.Timer;
@using Newtonsoft.Json;

<PageTitle>Moe Pomodoro</PageTitle>

<div id="background-1" style="--background-image-1:url('@_backgroundImage1');--background-z-1:@_backgroundZ1;"></div>
<div id="background-2" style="--background-image-2:url('@_backgroundImage2');--background-z-2:@_backgroundZ2;"></div>
<div class="dark-overlay"></div>
<div class="outer-container">
    <div class="inner-container">
        <h1>Moe Pomodoro</h1>
        <a class="github-button" href="https://github.com/cppshane/moe-pomodoro" data-icon="octicon-star" data-size="large" data-show-count="true">Star</a>
        <div class="clock-container" @onclick="ToggleState">
            <p id="time-text">@TimerString</p>
            <div id="clock-background" style="--clock-background-color:@_clockBackgroundColor"></div>
            <div id="clock-foreground"></div>
        </div>
        <div id="reset-container" @onclick="Reset">
            <img src="https://cdn.shaneduffy.io/moe-pomodoro/reset.webp" />
            <div id="reset-background"></div>
        </div>
    </div>
</div>
@if (_soundPath != String.Empty) {
    <audio autoplay controls hidden><source src="@_soundPath" /></audio>
}

@code {
    private static readonly string PicEndpoint = "https://api.waifu.im/random/?is_nsfw=false";
    private static readonly string MoshiSound = "https://cdn.shaneduffy.io/moe-pomodoro/audio/moshi.mp3";

    private static readonly TimeSpan WorkTimeSpan = TimeSpan.FromMinutes(25);
    private static readonly TimeSpan BreakTimeSpan = TimeSpan.FromMinutes(5);
    private static readonly string BlackClockColor = "rgba(0, 0, 0, 0.3)";
    private static readonly string GreenClockColor = "rgba(0, 255, 20, 0.15)";
    private static readonly string BlueClockColor = "rgba(0, 184, 255, 0.1)";

    public string TimerString {
        get {
            return _clockTime.ToString(@"mm\:ss");
        }
    }

    private HttpClient client = new HttpClient();
    private SystemTimer _timer = new SystemTimer(1000);

    private string _backgroundImage1 = String.Empty;
    private string _backgroundImage2 = String.Empty;
    private string _backgroundZ1 = "90";
    private string _backgroundZ2 = "89";
    private string _soundPath;
    private string _clockBackgroundColor = BlackClockColor;

    private bool _showBackground1 = true;
    private bool _workMode = true;
    private bool _timerActive = false;

    private TimeSpan _originalTimeSpan;
    private TimeSpan _clockTime;
    private DateTime _startTime;


    public Index() {
        _timer.Elapsed += (sender, e) => Tick(e.SignalTime);
    }

    private void StartTimer() {
        _startTime = DateTime.Now;
        _timer.Start();
    }

    private void PauseTimer() {
        _timer.Stop();
    }

    private void Tick(DateTime signalTime) {
        var time = _originalTimeSpan.Subtract(signalTime - _startTime).Add(TimeSpan.FromSeconds(1));
        if (_clockTime.TotalSeconds == 0) {
            PlaySound(MoshiSound);
            Reset();
        } else {
            _clockTime = time;
        }

        StateHasChanged();
    }

    private void PlaySound(string soundPath) {
        _soundPath = String.Empty;
        StateHasChanged();
        _soundPath = soundPath;
    }

    private async void RotateImage() {
        var dimensions = await jsModule.InvokeAsync<WindowDimensions>("getWindowSize");
        var useLandscape = dimensions.Width / dimensions.Height > 1.2;

        var requestResult = await client.GetAsync($"{PicEndpoint}&orientation={(useLandscape ? "LANDSCAPE" : "PORTRAIT")}");
        var content = await requestResult.Content.ReadAsStringAsync();

        if (_showBackground1) {
            _backgroundImage2 = String.Empty;
            _backgroundZ1 = "89";
            _backgroundZ2 = "90";
            _backgroundImage2 = (JsonConvert.DeserializeObject<dynamic>(content))?.images[0].url ?? String.Empty;
        } else {
            _backgroundImage1 = String.Empty;
            _backgroundZ1 = "90";
            _backgroundZ2 = "89";
            _backgroundImage1 = (JsonConvert.DeserializeObject<dynamic>(content))?.images[0].url ?? String.Empty;
        }

        _showBackground1 = !_showBackground1;

        StateHasChanged();
    }


    private IJSObjectReference jsModule;
    public class WindowDimensions {
        public double Width { get; set; }
        public double Height { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/get-window-size.js");
            RotateImage();
        }
    }

    private void Reset() {
        _timer.Stop();

        if (_workMode) {
            _originalTimeSpan = BreakTimeSpan;
        } else {
            _originalTimeSpan = WorkTimeSpan;
        }

        _clockBackgroundColor = BlackClockColor;
        _clockTime = _originalTimeSpan;
        _workMode = !_workMode;
        _timerActive = false;

        RotateImage();
    }

    private void ToggleState() {
        if (_timerActive) {
            _originalTimeSpan = _clockTime;
            _timer.Stop();
            _clockBackgroundColor = BlackClockColor;
        } else {
            _startTime = DateTime.Now;
            _timer.Start();
            _clockBackgroundColor = _workMode ? GreenClockColor : BlueClockColor;
        }

        _timerActive = !_timerActive;
    }
}